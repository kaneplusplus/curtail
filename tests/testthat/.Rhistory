expect_equal(trial$PET, prob_early_stop(p = c(p1_null, p2_null), n = c(n1, n2), r = c(r1, r2)))
expect_equal(trial$minimax_prob, minimax_design_old(p = c(p1_null, p2_null), n = c(n1, n2), r = c(r1, r2)))
expect_is(trial, "data.frame")
})
test_that("two_stage_curtail_trial works for case 3", {
p1_null <- 0.8
p2_null <- 0.2
p1_alt <- 0.8
p2_alt <- 0.4
n1 <- 6
n2 <- 30
prob_early <- 0.1
alpha <- 0.1
trial <- two_stage_curtail_trial(p1_null = p1_null, p2_null = p2_null,
p1_alt = p1_alt, p2_alt = p2_alt, n1=n1, n2=n2,
prob_early=prob_early, alpha=alpha)
r1 <- two_stage_critical_values(n=c(n1, n2), p=c(p1_null, p2_null), pearly=prob_early, alpha=alpha)[1]
r2 <- two_stage_critical_values(n=c(n1, n2), p=c(p1_null, p2_null), pearly=prob_early, alpha=alpha)[2]
expect_equal(as.numeric(trial[1:8]), c(p1_null, p2_null, p1_alt, p2_alt, n1, n2, r1, r2))
expect_equal(trial$power, two_stage_power(p = c(p1_alt, p2_alt), n = c(n1, n2), r = c(r1, r2)))
expect_equal(trial$significance, two_stage_significance(p = c(p1_null, p2_null), n = c(n1, n2), r = c(r1, r2)))
expect_equal(trial$stage1_mean_ss, expected_stage1_sample_size(p = c(p1_null, p2_null), n = c(n1, n2), r = c(r1, r2))$expectation)
expect_equal(trial$mean_ss_null, expected_total_sample_size(p = c(p1_null, p2_null), n = c(n1, n2), r = c(r1, r2)))
expect_equal(trial$mean_ss_alt, expected_total_sample_size(p = c(p1_alt, p2_alt), n = c(n1, n2), r = c(r1, r2)))
expect_equal(trial$PET, prob_early_stop(p = c(p1_null, p2_null), n = c(n1, n2), r = c(r1, r2)))
expect_equal(trial$minimax_prob, minimax_design_old(p = c(p1_null, p2_null), n = c(n1, n2), r = c(r1, r2)))
expect_is(trial, "data.frame")
})
test_that("two_stage_curtail_trial works for case 3a", {
p1_null <- 0.8
p2_null <- 0.2
p1_alt <- 0.8
p2_alt <- 0.4
n1 <- 6
n2 <- 30
prob_early <- 0.1
trial <- two_stage_curtail_trial(p1_null = p1_null, p2_null = p2_null,
p1_alt = p1_alt, p2_alt = p2_alt, n1=n1, n2=n2,
prob_early=prob_early)
r1 <- two_stage_critical_values(n=c(n1, n2), p=c(p1_null, p2_null), pearly=prob_early)[1]
r2 <- two_stage_critical_values(n=c(n1, n2), p=c(p1_null, p2_null), pearly=prob_early)[2]
expect_equal(as.numeric(trial[1:8]), c(p1_null, p2_null, p1_alt, p2_alt, n1, n2, r1, r2))
expect_equal(trial$power, two_stage_power(p = c(p1_alt, p2_alt), n = c(n1, n2), r = c(r1, r2)))
expect_equal(trial$significance, two_stage_significance(p = c(p1_null, p2_null), n = c(n1, n2), r = c(r1, r2)))
expect_equal(trial$stage1_mean_ss, expected_stage1_sample_size(p = c(p1_null, p2_null), n = c(n1, n2), r = c(r1, r2))$expectation)
expect_equal(trial$mean_ss_null, expected_total_sample_size(p = c(p1_null, p2_null), n = c(n1, n2), r = c(r1, r2)))
expect_equal(trial$mean_ss_alt, expected_total_sample_size(p = c(p1_alt, p2_alt), n = c(n1, n2), r = c(r1, r2)))
expect_equal(trial$PET, prob_early_stop(p = c(p1_null, p2_null), n = c(n1, n2), r = c(r1, r2)))
expect_equal(trial$minimax_prob, minimax_design_old(p = c(p1_null, p2_null), n = c(n1, n2), r = c(r1, r2)))
expect_is(trial, "data.frame")
})
test_that("two_stage_curtail_trial works for case 3b", {
p1_null <- 0.8
p2_null <- 0.2
p1_alt <- 0.8
p2_alt <- 0.4
n1 <- 6
n2 <- 30
alpha <- 0.05
trial <- two_stage_curtail_trial(p1_null = p1_null, p2_null = p2_null,
p1_alt = p1_alt, p2_alt = p2_alt, n1=n1, n2=n2,
alpha=alpha)
r1 <- two_stage_critical_values(n=c(n1, n2), p=c(p1_null, p2_null), alpha=alpha)[1]
r2 <- two_stage_critical_values(n=c(n1, n2), p=c(p1_null, p2_null), alpha=alpha)[2]
expect_equal(as.numeric(trial[1:8]), c(p1_null, p2_null, p1_alt, p2_alt, n1, n2, r1, r2))
expect_equal(trial$power, two_stage_power(p = c(p1_alt, p2_alt), n = c(n1, n2), r = c(r1, r2)))
expect_equal(trial$significance, two_stage_significance(p = c(p1_null, p2_null), n = c(n1, n2), r = c(r1, r2)))
expect_equal(trial$stage1_mean_ss, expected_stage1_sample_size(p = c(p1_null, p2_null), n = c(n1, n2), r = c(r1, r2))$expectation)
expect_equal(trial$mean_ss_null, expected_total_sample_size(p = c(p1_null, p2_null), n = c(n1, n2), r = c(r1, r2)))
expect_equal(trial$mean_ss_alt, expected_total_sample_size(p = c(p1_alt, p2_alt), n = c(n1, n2), r = c(r1, r2)))
expect_equal(trial$PET, prob_early_stop(p = c(p1_null, p2_null), n = c(n1, n2), r = c(r1, r2)))
expect_equal(trial$minimax_prob, minimax_design_old(p = c(p1_null, p2_null), n = c(n1, n2), r = c(r1, r2)))
expect_is(trial, "data.frame")
})
test_that("two_stage_curtail_trial works for case 4", {
p1_null <- 0.8
p2_null <- 0.2
p1_alt <- 0.8
p2_alt <- 0.4
n_total <- 36
prob_early=0.2
alpha <- 0.05
trials <- two_stage_curtail_trial(p1_null = p1_null, p2_null = p2_null,
p1_alt = p1_alt, p2_alt = p2_alt, n_total = n_total,
prob_early=prob_early, alpha=alpha)
n1 <- seq_len(n_total-1)
n2 <- n_total - n1
n <- cbind(n1, n2)
r <- matrix(apply(n, 1, function(x){
two_stage_critical_values(x, c(p1_null, p2_null),
pearly = prob_early,alpha = alpha)
}), nrow=length(n1), ncol=2, byrow=TRUE)
r1 <- r[,1]
r2 <- r[,2]
df <- data.frame(p1_null=rep(p1_null, length(n1)),
p2_null=rep(p2_null, length(n1)),
p1_alt=rep(p1_alt, length(n1)),
p2_alt=rep(p2_alt, length(n1)),
n1=n1, n2=n2, r1=r[,1], r2=r[,2])
if(min(df$r1)==0){
df <- subset(df, r1>0)
rownames(df) <- NULL
}
expect_equal(data.frame(trials[,1:8]), df)
expect_equal(trials$power, apply(df, MARGIN = 1, function(x) two_stage_power(p = c(x["p1_alt"], x["p2_alt"]),
n = c(x["n1"], x["n2"]), r = c(x["r1"], x["r2"]))))
expect_equal(trials$significance, apply(df, MARGIN = 1, function(x) two_stage_significance(p = c(x["p1_null"], x["p2_null"]),
n = c(x["n1"], x["n2"]), r = c(x["r1"], x["r2"]))))
expect_equal(trials$stage1_mean_ss, apply(df, MARGIN = 1, function(x) expected_stage1_sample_size(p = c(x["p1_null"], x["p2_null"]),
n = c(x["n1"], x["n2"]), r = c(x["r1"], x["r2"]))$expectation))
expect_equal(trials$mean_ss_null, apply(df, MARGIN = 1, function(x) expected_total_sample_size(p = c(x["p1_null"], x["p2_null"]),
n = c(x["n1"], x["n2"]), r = c(x["r1"], x["r2"]))))
expect_equal(trials$mean_ss_alt, apply(df, MARGIN = 1, function(x) expected_total_sample_size(p = c(x["p1_alt"], x["p2_alt"]),
n = c(x["n1"], x["n2"]), r = c(x["r1"], x["r2"]))))
expect_equal(trials$PET, apply(df, MARGIN = 1, function(x) prob_early_stop(p = c(x["p1_null"], x["p2_null"]),
n = c(x["n1"], x["n2"]), r = c(x["r1"], x["r2"]))))
expect_equal(trials$minimax_prob, apply(df, MARGIN = 1, function(x) minimax_design_old(p = c(x["p1_null"], x["p2_null"]),
n = c(x["n1"], x["n2"]), r = c(x["r1"], x["r2"]))))
expect_is(trials, "data.frame")
})
test_that("two_stage_curtail_trial works for case 4a", {
p1_null <- 0.8
p2_null <- 0.2
p1_alt <- 0.8
p2_alt <- 0.4
n_total <- 36
prob_early=0.2
trials <- two_stage_curtail_trial(p1_null = p1_null, p2_null = p2_null,
p1_alt = p1_alt, p2_alt = p2_alt, n_total=n_total,
prob_early=prob_early)
n1 <- seq_len(n_total-1)
n2 <- n_total - n1
n <- cbind(n1, n2)
r <- matrix(apply(n, 1, function(x){
two_stage_critical_values(x, c(p1_null, p2_null),
pearly = prob_early)
}), nrow=length(n1), ncol=2, byrow=TRUE)
r1 <- r[,1]
r2 <- r[,2]
df <- data.frame(p1_null=rep(p1_null, length(n1)),
p2_null=rep(p2_null, length(n1)),
p1_alt=rep(p1_alt, length(n1)),
p2_alt=rep(p2_alt, length(n1)),
n1=n1, n2=n2, r1=r[,1], r2=r[,2])
if(min(df$r1)==0){
df <- subset(df, r1>0)
rownames(df) <- NULL
}
expect_equal(data.frame(trials[,1:8]), df)
expect_equal(trials$power, apply(df, MARGIN = 1, function(x) two_stage_power(p = c(x["p1_alt"], x["p2_alt"]),
n = c(x["n1"], x["n2"]), r = c(x["r1"], x["r2"]))))
expect_equal(trials$significance, apply(df, MARGIN = 1, function(x) two_stage_significance(p = c(x["p1_null"], x["p2_null"]),
n = c(x["n1"], x["n2"]), r = c(x["r1"], x["r2"]))))
expect_equal(trials$stage1_mean_ss, apply(df, MARGIN = 1, function(x) expected_stage1_sample_size(p = c(x["p1_null"], x["p2_null"]),
n = c(x["n1"], x["n2"]), r = c(x["r1"], x["r2"]))$expectation))
expect_equal(trials$mean_ss_null, apply(df, MARGIN = 1, function(x) expected_total_sample_size(p = c(x["p1_null"], x["p2_null"]),
n = c(x["n1"], x["n2"]), r = c(x["r1"], x["r2"]))))
expect_equal(trials$mean_ss_alt, apply(df, MARGIN = 1, function(x) expected_total_sample_size(p = c(x["p1_alt"], x["p2_alt"]),
n = c(x["n1"], x["n2"]), r = c(x["r1"], x["r2"]))))
expect_equal(trials$PET, apply(df, MARGIN = 1, function(x) prob_early_stop(p = c(x["p1_null"], x["p2_null"]),
n = c(x["n1"], x["n2"]), r = c(x["r1"], x["r2"]))))
expect_equal(trials$minimax_prob, apply(df, MARGIN = 1, function(x) minimax_design_old(p = c(x["p1_null"], x["p2_null"]),
n = c(x["n1"], x["n2"]), r = c(x["r1"], x["r2"]))))
expect_is(trials, "data.frame")
})
test_that("two_stage_curtail_trial works for case 4b", {
p1_null <- 0.8
p2_null <- 0.2
p1_alt <- 0.8
p2_alt <- 0.4
n_total <- 36
alpha <- 0.05
trials <- two_stage_curtail_trial(p1_null = p1_null, p2_null = p2_null,
p1_alt = p1_alt, p2_alt = p2_alt, n_total=n_total,
alpha=alpha)
n1 <- seq_len(n_total-1)
n2 <- n_total - n1
n <- cbind(n1, n2)
r <- matrix(apply(n, 1, function(x){
two_stage_critical_values(x, c(p1_null, p2_null),
alpha = alpha)
}), nrow=length(n1), ncol=2, byrow=TRUE)
r1 <- r[,1]
r2 <- r[,2]
df <- data.frame(p1_null=rep(p1_null, length(n1)),
p2_null=rep(p2_null, length(n1)),
p1_alt=rep(p1_alt, length(n1)),
p2_alt=rep(p2_alt, length(n1)),
n1=n1, n2=n2, r1=r[,1], r2=r[,2])
if(min(df$r1)==0){
df <- subset(df, r1>0)
rownames(df) <- NULL
}
expect_equal(data.frame(trials[,1:8]), df)
expect_equal(trials$power, apply(df, MARGIN = 1, function(x) two_stage_power(p = c(x["p1_alt"], x["p2_alt"]),
n = c(x["n1"], x["n2"]), r = c(x["r1"], x["r2"]))))
expect_equal(trials$significance, apply(df, MARGIN = 1, function(x) two_stage_significance(p = c(x["p1_null"], x["p2_null"]),
n = c(x["n1"], x["n2"]), r = c(x["r1"], x["r2"]))))
expect_equal(trials$stage1_mean_ss, apply(df, MARGIN = 1, function(x) expected_stage1_sample_size(p = c(x["p1_null"], x["p2_null"]),
n = c(x["n1"], x["n2"]), r = c(x["r1"], x["r2"]))$expectation))
expect_equal(trials$mean_ss_null, apply(df, MARGIN = 1, function(x) expected_total_sample_size(p = c(x["p1_null"], x["p2_null"]),
n = c(x["n1"], x["n2"]), r = c(x["r1"], x["r2"]))))
expect_equal(trials$mean_ss_alt, apply(df, MARGIN = 1, function(x) expected_total_sample_size(p = c(x["p1_alt"], x["p2_alt"]),
n = c(x["n1"], x["n2"]), r = c(x["r1"], x["r2"]))))
expect_equal(trials$PET, apply(df, MARGIN = 1, function(x) prob_early_stop(p = c(x["p1_null"], x["p2_null"]),
n = c(x["n1"], x["n2"]), r = c(x["r1"], x["r2"]))))
expect_equal(trials$minimax_prob, apply(df, MARGIN = 1, function(x) minimax_design_old(p = c(x["p1_null"], x["p2_null"]),
n = c(x["n1"], x["n2"]), r = c(x["r1"], x["r2"]))))
expect_is(trials, "data.frame")
})
test_that("two_stage_curtail_trial works for case 5", {
p1_null <- 0.8
p2_null <- 0.2
p1_alt <- 0.8
p2_alt <- 0.4
n_total <- 36
trials <- two_stage_curtail_trial(p1_null = p1_null, p2_null = p2_null,
p1_alt = p1_alt, p2_alt = p2_alt, n_total=n_total)
n1 <- seq_len(n_total-1)
n2 <- n_total - n1
n <- cbind(n1, n2)
r <- matrix(apply(n, 1, function(x){
two_stage_critical_values(x, c(p1_null, p2_null))
}), nrow=length(n1), ncol=2, byrow=TRUE)
r1 <- r[,1]
r2 <- r[,2]
df <- data.frame(p1_null=rep(p1_null, length(n1)),
p2_null=rep(p2_null, length(n1)),
p1_alt=rep(p1_alt, length(n1)),
p2_alt=rep(p2_alt, length(n1)),
n1=n1, n2=n2, r1=r[,1], r2=r[,2])
if(min(df$r1)==0){
df <- subset(df, r1>0)
rownames(df) <- NULL
}
expect_equal(data.frame(trials[,1:8]), df)
expect_equal(trials$power, apply(df, MARGIN = 1, function(x) two_stage_power(p = c(x["p1_alt"], x["p2_alt"]),
n = c(x["n1"], x["n2"]), r = c(x["r1"], x["r2"]))))
expect_equal(trials$significance, apply(df, MARGIN = 1, function(x) two_stage_significance(p = c(x["p1_null"], x["p2_null"]),
n = c(x["n1"], x["n2"]), r = c(x["r1"], x["r2"]))))
expect_equal(trials$stage1_mean_ss, apply(df, MARGIN = 1, function(x) expected_stage1_sample_size(p = c(x["p1_null"], x["p2_null"]),
n = c(x["n1"], x["n2"]), r = c(x["r1"], x["r2"]))$expectation))
expect_equal(trials$mean_ss_null, apply(df, MARGIN = 1, function(x) expected_total_sample_size(p = c(x["p1_null"], x["p2_null"]),
n = c(x["n1"], x["n2"]), r = c(x["r1"], x["r2"]))))
expect_equal(trials$mean_ss_alt, apply(df, MARGIN = 1, function(x) expected_total_sample_size(p = c(x["p1_alt"], x["p2_alt"]),
n = c(x["n1"], x["n2"]), r = c(x["r1"], x["r2"]))))
expect_equal(trials$PET, apply(df, MARGIN = 1, function(x) prob_early_stop(p = c(x["p1_null"], x["p2_null"]),
n = c(x["n1"], x["n2"]), r = c(x["r1"], x["r2"]))))
expect_equal(trials$minimax_prob, apply(df, MARGIN = 1, function(x) minimax_design_old(p = c(x["p1_null"], x["p2_null"]),
n = c(x["n1"], x["n2"]), r = c(x["r1"], x["r2"]))))
expect_is(trials, "data.frame")
})
p1_null <- 0.8
p2_null <- 0.2
p1_alt <- 0.8
p2_alt <- 0.4
n1 <- 6
n2 <- 30
r1 <- 4
r2 <- 11
trial <- two_stage_curtail_trial(p1_null = p1_null, p2_null = p2_null,
p1_alt = p1_alt, p2_alt = p2_alt, n1=n1, n2=n2, r1=r1, r2=r2)
sig <- significance(trial)
expect_equal(sig, trial$significance)
expect_is(sig, "numeric")
trial <- two_stage_curtail_trial(p1_null = p1_null, p2_null = p2_null,
p1_alt = p1_alt, p2_alt = p2_alt, n1=n1, n2=n2, r1=r1, r2=r2)
pow <- power(trial)
expect_equal(pow, trial$power)
expect_is(pow, "numeric")
stage1 <- stage1_sample_size(trial)
expect_equal(stage1, trial$stage1_mean_ss)
expect_is(stage1, "numeric")
ess <- expected_sample_size(trial)
expect_equal(ess, trial$mean_ss_null)
expect_is(ess, "numeric")
essA <- expected_sample_size_alt(trial)
expect_equal(essA, trial$mean_ss_alt)
expect_is(ess, "numeric")
pet <- PET(trial)
expect_equal(pet, trial$PET)
expect_is(pet, "numeric")
minimax <- minimax_probability(trial)
expect_equal(minimax, trial$minimax_prob)
expect_is(minimax, "numeric")
document()
test_that("minimax_probability function works for two-stage curtail trial", {
p1_null <- 0.8
p2_null <- 0.2
p1_alt <- 0.8
p2_alt <- 0.4
n1 <- 6
n2 <- 30
r1 <- 4
r2 <- 11
trial <- two_stage_curtail_trial(p1_null = p1_null, p2_null = p2_null,
p1_alt = p1_alt, p2_alt = p2_alt, n1=n1, n2=n2, r1=r1, r2=r2)
minimax <- minimax_probability(trial)
expect_equal(minimax, trial$minimax_prob)
expect_is(minimax, "numeric")
})
test_that("PET function works for two-stage curtail trial", {
p1_null <- 0.8
p2_null <- 0.2
p1_alt <- 0.8
p2_alt <- 0.4
n1 <- 6
n2 <- 30
r1 <- 4
r2 <- 11
trial <- two_stage_curtail_trial(p1_null = p1_null, p2_null = p2_null,
p1_alt = p1_alt, p2_alt = p2_alt, n1=n1, n2=n2, r1=r1, r2=r2)
pet <- PET(trial)
expect_equal(pet, trial$PET)
expect_is(pet, "numeric")
})
test_that("expected_sample_size_alt function works for two-stage curtail trial", {
p1_null <- 0.8
p2_null <- 0.2
p1_alt <- 0.8
p2_alt <- 0.4
n1 <- 6
n2 <- 30
r1 <- 4
r2 <- 11
trial <- two_stage_curtail_trial(p1_null = p1_null, p2_null = p2_null,
p1_alt = p1_alt, p2_alt = p2_alt, n1=n1, n2=n2, r1=r1, r2=r2)
essA <- expected_sample_size_alt(trial)
expect_equal(essA, trial$mean_ss_alt)
expect_is(ess, "numeric")
})
test_that("expected_sample_size function works for two-stage curtail trial", {
p1_null <- 0.8
p2_null <- 0.2
p1_alt <- 0.8
p2_alt <- 0.4
n1 <- 6
n2 <- 30
r1 <- 4
r2 <- 11
trial <- two_stage_curtail_trial(p1_null = p1_null, p2_null = p2_null,
p1_alt = p1_alt, p2_alt = p2_alt, n1=n1, n2=n2, r1=r1, r2=r2)
ess <- expected_sample_size(trial)
expect_equal(ess, trial$mean_ss_null)
expect_is(ess, "numeric")
})
test_that("stage1_sample_size function works for two-stage curtail trial", {
p1_null <- 0.8
p2_null <- 0.2
p1_alt <- 0.8
p2_alt <- 0.4
n1 <- 6
n2 <- 30
r1 <- 4
r2 <- 11
trial <- two_stage_curtail_trial(p1_null = p1_null, p2_null = p2_null,
p1_alt = p1_alt, p2_alt = p2_alt, n1=n1, n2=n2, r1=r1, r2=r2)
stage1 <- stage1_sample_size(trial)
expect_equal(stage1, trial$stage1_mean_ss)
expect_is(stage1, "numeric")
})
test_that("power function works for two-stage curtail trial", {
p1_null <- 0.8
p2_null <- 0.2
p1_alt <- 0.8
p2_alt <- 0.4
n1 <- 6
n2 <- 30
r1 <- 4
r2 <- 11
trial <- two_stage_curtail_trial(p1_null = p1_null, p2_null = p2_null,
p1_alt = p1_alt, p2_alt = p2_alt, n1=n1, n2=n2, r1=r1, r2=r2)
pow <- power(trial)
expect_equal(pow, trial$power)
expect_is(pow, "numeric")
})
test_that("significance function works for two-stage curtail trial", {
p1_null <- 0.8
p2_null <- 0.2
p1_alt <- 0.8
p2_alt <- 0.4
n1 <- 6
n2 <- 30
r1 <- 4
r2 <- 11
trial <- two_stage_curtail_trial(p1_null = p1_null, p2_null = p2_null,
p1_alt = p1_alt, p2_alt = p2_alt, n1=n1, n2=n2, r1=r1, r2=r2)
sig <- significance(trial)
expect_equal(sig, trial$significance)
expect_is(sig, "numeric")
})
test_that("two_stage_curtail_trial works for case 1", {
p1_null <- 0.8
p2_null <- 0.2
p1_alt <- 0.8
p2_alt <- 0.4
n1 <- 6
n2 <- 30
r1 <- 4
r2 <- 11
trial <- two_stage_curtail_trial(p1_null = p1_null, p2_null = p2_null,
p1_alt = p1_alt, p2_alt = p2_alt, n1=n1, n2=n2, r1=r1, r2=r2)
expect_equal(as.numeric(trial[1:8]), c(p1_null, p2_null, p1_alt, p2_alt, n1, n2, r1, r2))
expect_equal(trial$power, two_stage_power(p = c(p1_alt, p2_alt), n = c(n1, n2), r = c(r1, r2)))
expect_equal(trial$significance, two_stage_significance(p = c(p1_null, p2_null), n = c(n1, n2), r = c(r1, r2)))
expect_equal(trial$stage1_mean_ss, expected_stage1_sample_size(p = c(p1_null, p2_null), n = c(n1, n2), r = c(r1, r2))$expectation)
expect_equal(trial$mean_ss_null, expected_total_sample_size(p = c(p1_null, p2_null), n = c(n1, n2), r = c(r1, r2)))
expect_equal(trial$mean_ss_alt, expected_total_sample_size(p = c(p1_alt, p2_alt), n = c(n1, n2), r = c(r1, r2)))
expect_equal(trial$PET, prob_early_stop(p = c(p1_null, p2_null), n = c(n1, n2), r = c(r1, r2)))
expect_equal(trial$minimax_prob, minimax_design_old(p = c(p1_null, p2_null), n = c(n1, n2), r = c(r1, r2)))
expect_is(trial, "data.frame")
})
test_that("single_stage_curtail_trial works when n is a parameter", {
p_null <- 0.2
p_alt <- 0.4
n <- 17
trials <- single_stage_curtail_trial(p_null=p_null, p_alt=p_alt, n= n)
s <- seq_len(n-1)
t <- n - s + 1
df <- data.frame(p_null=rep(p_null, length(s)),
p_alt=rep(p_alt, length(s)), s=s, t=t)
expect_equal(data.frame(trials[1:4]), df)
expect_equal(trials$power, apply(df, MARGIN = 1, function(x) single_stage_power(x["p_alt"], x["s"], x["t"])))
expect_equal(trials$significance, apply(df, MARGIN=1, function(x) single_stage_significance(x["p_null"], x["s"], x["t"])))
expect_equal(trials$mean_ss, apply(df, MARGIN=1, function(x) single_stage_expected_sample_size(x["p_null"], x["s"], x["t"])$expectation))
expect_is(trials, "data.frame")
})
test_that("single_stage_curtail_trial works when s and t are parameters", {
p_null <- 0.2
p_alt <- 0.4
s <- 7
t <- 11
trial <- single_stage_curtail_trial(p_null=p_null, p_alt=p_alt, s=s, t=t)
expect_equal(as.numeric(trial[1:4]), c(p_null, p_alt, s, t))
expect_equal(trial$power, single_stage_power(pAlt = p_alt, s = s, t = t))
expect_equal(trial$significance, single_stage_significance(pNull = p_null, s=s, t=t))
expect_equal(trial$mean_ss, single_stage_expected_sample_size(p = p_null, s=s, t=t)$expectation)
expect_is(trial, "data.frame")
})
trial
print.two_stage_curtail_trial <- function(object, ...) {
if (nrow(object) == 1) {
ret <- object
# It's a single, two-stage curtail trial.
cat("\n")
cat(" Two-Stage Curtail Trial\n")
cat("\n")
cat("Null response rate at time t1: ", object$p1_null[1], "\n")
cat("Null response rate at time t2: ", object$p2_null[1], "\n")
cat("Alternative response rate at time t1: ", object$p1_alt[1], "\n")
cat("Alternative response rate at time t2: ", object$p2_alt[1], "\n")
cat("Responses to continue the trial to Stage 2: ", object$r1[1], "\n")
cat("Responses to reject the null hypothesis: ", object$r2[1], "\n")
cat("Power: ", object$power, "\n")
cat("Significance: ", object$significance, "\n")
cat("Stage 1 expected sample size: ", object$mean, "\n")
cat("Expected sample size under the null: ", object$mean_ss_null[1])
cat("Expected sample size under the alternative: ", object$mean_ss_alt[1])
cat("Probability of early termination of the trial: ", object$PET[1])
cat("Probability of requiring the maximum sample size: ", object$minimax_prob[1])
}
}
print(trial)
print.two_stage_curtail_trial <- function(object, ...) {
if (nrow(object) == 1) {
ret <- object
# It's a single, two-stage curtail trial.
cat("\n")
cat(" Two-Stage Curtail Trial\n")
cat("\n")
cat("Null response rate at time t1: ", object$p1_null[1], "\n")
cat("Null response rate at time t2: ", object$p2_null[1], "\n")
cat("Alternative response rate at time t1: ", object$p1_alt[1], "\n")
cat("Alternative response rate at time t2: ", object$p2_alt[1], "\n")
cat("Responses to continue the trial to Stage 2: ", object$r1[1], "\n")
cat("Responses to reject the null hypothesis: ", object$r2[1], "\n")
cat("Power: ", object$power, "\n")
cat("Significance: ", object$significance, "\n")
cat("Stage 1 expected sample size: ", object$mean, "\n")
cat("Expected sample size under the null: ", object$mean_ss_null[1], "\n")
cat("Expected sample size under the alternative: ", object$mean_ss_alt[1], "\n")
cat("Probability of early termination of the trial: ", object$PET[1], "\n")
cat("Probability of requiring the maximum sample size: ", object$minimax_prob[1], "\n")
}
}
print(trial)
trial
trial
print.two_stage_curtail_trial <- function(object, ...) {
if (nrow(object) == 1) {
ret <- object
# It's a single, two-stage curtail trial.
cat("\n")
cat(" Two-Stage Curtail Trial\n")
cat("\n")
cat("Null response rate at time t1: ", object$p1_null[1], "\n")
cat("Null response rate at time t2: ", object$p2_null[1], "\n")
cat("Alternative response rate at time t1: ", object$p1_alt[1], "\n")
cat("Alternative response rate at time t2: ", object$p2_alt[1], "\n")
cat("Responses to continue the trial to Stage 2: ", object$r1[1], "\n")
cat("Responses to reject the null hypothesis: ", object$r2[1], "\n")
cat("Power: ", object$power, "\n")
cat("Significance: ", object$significance, "\n")
cat("Stage 1 expected sample size: ", object$stage1_mean_ss, "\n")
cat("Expected sample size under the null: ", object$mean_ss_null[1], "\n")
cat("Expected sample size under the alternative: ", object$mean_ss_alt[1], "\n")
cat("Probability of early termination of the trial: ", object$PET[1], "\n")
cat("Probability of requiring the maximum sample size: ", object$minimax_prob[1], "\n")
}
}
print(trial)
test()
